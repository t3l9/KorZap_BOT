import io
import qrcode
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, \
    CallbackQueryHandler, ContextTypes
import sqlite3
import re
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import random


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
def create_connection():
    return sqlite3.connect('PATH')


# –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¥—É—Ä–∞–∫–∞
def is_valid_username(username: str) -> bool:
    return 3 <= len(username) <= 20 and re.match(r'^[a-zA-Z0-9_]+$', username)


def is_valid_password(password: str) -> bool:
    return (6 <= len(password) <= 20 and
            re.search(r'[A-Z]', password) and  # —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞
            re.search(r'[0-9]', password) and  # —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞
            re.search(r'[!@#$%^&*(),.?":{}|<>]', password))  # —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª


def is_valid_email(email: str) -> bool:
    return re.match(r"[^@]+@[^@]+\.[^@]+", email) is not None


def is_valid_phone(phone: str) -> bool:
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: —Ä–æ–≤–Ω–æ 11 —Ü–∏—Ñ—Ä, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å —Å–∏–º–≤–æ–ª–æ–º '+'
    return re.match(r'^\+?\d{11}$', phone) is not None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
def send_welcome_email(to_email: str, username: str) -> None:
    from_email = 'login'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à email
    from_password = 'password'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å

    body = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KorZap!\n\n"
        "–í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –∫–æ—Ä–µ–π—Å–∫–∏—Ö –∏ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.\n\n"
        "–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?\n"
        "‚Ä¢ –ú—ã –Ω–∞ —Ä—ã–Ω–∫–µ —Å 2015 –≥–æ–¥–∞.\n"
        "‚Ä¢ –ü—Ä–æ–¥–∞–Ω–æ –±–æ–ª–µ–µ 300 —Ç—ã—Å—è—á –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π.\n"
        "‚Ä¢ –®–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã–µ —Ü–µ–Ω—ã.\n\n"
        "–í KorZap –º—ã –ø–æ–Ω–∏–º–∞–µ–º, –∫–∞–∫ –≤–∞–∂–Ω–∞ –¥–ª—è –≤–∞—Å –∫–∞–∂–¥–∞—è –¥–µ—Ç–∞–ª—å:\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –æ—Ç –Ω–∞–¥–µ–∂–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π.\n"
        "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–º—Ñ–æ—Ä—Ç –≤–∞—à–∏—Ö –ø–æ–µ–∑–¥–æ–∫.\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ –¥–µ—Ç–∞–ª–µ–π.\n\n"
        "–ü—É—Å—Ç—å –≤–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø–µ—Ä–µ–±–æ–µ–≤ —Å KorZap! –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –∫ –≤–∞—à–µ–º—É —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—é –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –ª—É—á—à–µ–µ. "
        "–ü–æ–∑–≤–æ–ª—å—Ç–µ –Ω–∞–º —Å—Ç–∞—Ç—å –≤–∞—à–∏–º –Ω–∞–¥–µ–∂–Ω—ã–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –Ω–∞ –ø—É—Ç–∏ –∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è!"
    )
    subject = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ. –ú—ã —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å!"

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = MIMEMultipart()
    msg['From'] = from_email
    msg['To'] = to_email
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'plain'))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
    try:
        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            server.login(from_email, from_password)  # –õ–æ–≥–∏–Ω –≤ email
            server.send_message(msg)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
            print("–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")


def generate_confirmation_code():
    return ''.join(random.choices('0123456789', k=6))


def send_confirmation_email(email, code):
    msg = MIMEText(f"–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}")
    msg['Subject'] = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
    msg['From'] = 'telmanmessi@gmail.com'
    msg['To'] = email

    # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SMTP-—Å–µ—Ä–≤–µ—Ä–∞
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.starttls()
    server.login('login', 'password')
    server.send_message(msg)
    server.quit()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ—á—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def check_email_in_database(email):
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM Customer WHERE Email = ?', (email,))
    result = cursor.fetchone()
    conn.close()
    return result is not None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_password_in_database(email, new_password):
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('UPDATE User SET Password = ? WHERE Login = (SELECT Login FROM Customer WHERE Email = ?)',
                   (new_password, email))
    conn.commit()
    conn.close()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if 'role' in context.user_data:
        user_data = context.user_data
        if user_data.get('role') == 'customer':
            await show_customer_dashboard(update, context, user_data.get('username'))
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("–í—Ö–æ–¥", callback_data='sign_in')],
            [InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='reg_in')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if query.data == "sign_in":
        context.user_data['last_action'] = "sign_in"
        await prompt_sign_in(update, context)
    elif query.data == "reg_in":
        context.user_data['last_action'] = "reg_in"
        await prompt_registration(update, context)
    elif query.data == "reset_password":
        context.user_data['last_action'] = "reset_password"
        await query.message.edit_text("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
    elif query.data == "products":
        await show_categories(update, context)  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    elif query.data.startswith("category_"):
        await show_products(update, context)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–æ–≤–∞—Ä
    elif query.data.startswith("product_"):
        print(query.data)
        product_id = int(query.data.split("_")[1])
        await show_product_details(update, context, product_id)
    # –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    elif query.data.startswith("add_to_cart_"):
        product_id = int(query.data.split("_")[3])
        await add_to_cart(update, context, product_id)
    elif query.data.startswith("confirm_payment_"):
        await confirm_payment(update, context)
    elif query.data == "order_history":
        await history_order(update, context)

    # –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    elif query.data == "profile":
        await show_customer_dashboard(update, context, context.user_data.get("username", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
    elif query.data == "logout":
        await handle_logout(update, context)
    elif query.data == "cart":
        await show_cart(update, context)  # –ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã
    elif query.data == "checkout":
        await checkout(update, context)  # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    elif query.data == "products":
        await show_categories(update, context)
    elif query.data.startswith("car_"):
        await show_products(update, context)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
async def prompt_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    registration_message = (
        "üìù *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä–æ–ª—å –∏–º—è —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ—á—Ç–∞`\n\n"
        "_–ü—Ä–∏–º–µ—Ä: johndoe 123456 –ò–≤–∞–Ω–æ–≤ +79991234567 ivanov@example.com_"
    )
    await update.callback_query.message.edit_text(registration_message, parse_mode='Markdown')


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Ö–æ–¥
async def prompt_sign_in(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
    await update.callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏

    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å–±—Ä–æ—Å–∞
    reset_keyboard = [
        [InlineKeyboardButton("–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?", callback_data='reset_password')]
    ]
    reply_markup_reset = InlineKeyboardMarkup(reset_keyboard)

    sign_in_message = (
        "üîë *–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä–æ–ª—å`\n\n"
        "_–ü—Ä–∏–º–µ—Ä: johndoe 123456_"
    )

    await update.callback_query.message.edit_text(sign_in_message, reply_markup=reply_markup_reset,
                                                  parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("–í—Ö–æ–¥", callback_data='sign_in')],
        [InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='reg_in')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = update.message.text
    parts = text.split()

    conn = create_connection()
    cursor = conn.cursor()

    try:
        user_data = context.user_data.get('last_action', None)

        if user_data == "sign_in":
            if len(parts) != 2:
                await update.message.reply_text(
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞*\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–≤–æ–¥–∞:\n"
                    "`–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä–æ–ª—å`\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    , parse_mode='Markdown')
                return

            username, password = parts
            cursor.execute('SELECT * FROM User WHERE Login = ?', (username,))
            user = cursor.fetchone()

            if user:
                if user[2] == password:
                    role = user[3]  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    context.user_data['role'] = role  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    context.user_data['username'] = username  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await update.message.reply_text(
                        "‚úÖ *–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!*\n\n"
                        , parse_mode='Markdown')
                    if role == 'customer':
                        await show_customer_dashboard(update, context, username)
                    else:
                        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

                else:
                    await update.message.reply_text(
                        "‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å*\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –∑–∞–±—ã–ª–∏.",
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
            else:
                await update.message.reply_text(
                    "‚ùå *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω*\n\n"
                    "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=reply_markup,
                    parse_mode='Markdown')

        elif user_data == "reg_in":
            if len(parts) != 5:
                await update.message.reply_text(
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞*\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–≤–æ–¥–∞:\n"
                    "`–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä–æ–ª—å –∏–º—è —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ—á—Ç–∞`\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    , parse_mode='Markdown')
                return

            username, password, name, phone, email = parts

            if not is_valid_username(username):
                await update.message.reply_text(
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞*\n\n"
                    "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è."
                    , parse_mode='Markdown')
                return

            if not is_valid_password(password):
                await update.message.reply_text(
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è*\n\n"
                    "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 6 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É, –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –∏ –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª."
                    , parse_mode='Markdown')
                return

            if not is_valid_email(email):
                await update.message.reply_text(
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—á—Ç—ã*\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã."
                    , parse_mode='Markdown')
                return

            if not is_valid_phone(phone):
                await update.message.reply_text(
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567."
                    , parse_mode='Markdown')
                return

            cursor.execute('SELECT * FROM Customer WHERE Phone = ? OR Email = ?', (phone, email))
            existing_user = cursor.fetchone()
            if existing_user:
                error_message = "‚ö†Ô∏è *–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏*\n\n"
                if existing_user[3] == phone:
                    error_message += "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n"
                if existing_user[4] == email:
                    error_message += "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.\n"
                await update.message.reply_text(error_message, parse_mode='Markdown')
                return

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_code = generate_confirmation_code()
            send_confirmation_email(email, confirmation_code)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–¥ –≤ user_data
            context.user_data['pending_registration'] = {
                'username': username,
                'password': password,
                'name': name,
                'phone': phone,
                'email': email,
                'confirmation_code': confirmation_code
            }
            await update.message.reply_text(
                "üìß *–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã*\n\n"
                "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                parse_mode='Markdown'
            )
            context.user_data['last_action'] = 'confirm_email'

        elif user_data == "confirm_email":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_code = text.strip()
            pending_registration = context.user_data.get('pending_registration', {})

            if confirmation_code == pending_registration.get('confirmation_code'):
                user_id = update.message.from_user.id
                cursor.execute('INSERT INTO User (ID_user, Login, Password, Role) VALUES (?, ?, ?, ?)',
                               (user_id, pending_registration['username'], pending_registration['password'],
                                'customer'))
                conn.commit()

                cursor.execute('INSERT INTO Customer (Login, Name, Phone, Email) VALUES (?, ?, ?, ?)',
                               (pending_registration['username'], pending_registration['name'],
                                pending_registration['phone'],
                                pending_registration['email']))
                conn.commit()

                await update.message.reply_text(
                    "üéâ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!*\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–∫ *{}*. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç —Å–Ω–æ–≤–∞.".format(
                        pending_registration['username']),
                    parse_mode='Markdown'
                )
                send_welcome_email(pending_registration['email'], pending_registration['username'])

                # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                context.user_data.pop('pending_registration', None)
                context.user_data['last_action'] = None
            else:
                await update.message.reply_text(
                    "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    parse_mode='Markdown'
                )
        elif context.user_data.get('last_action') == "reset_password":
            # –ó–∞–ø—Ä–æ—Å –ø–æ—á—Ç—ã –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
            await update.message.reply_text(
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:"
            )
            context.user_data['last_action'] = 'WAITING_FOR_EMAIL'  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ context.user_data

        elif context.user_data.get('last_action') == "WAITING_FOR_EMAIL":
            user_email = update.message.text.strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—á—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if check_email_in_database(user_email):  # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                confirmation_code = generate_confirmation_code()  # –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
                send_confirmation_email(user_email, confirmation_code)  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –∏ email –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                context.user_data['confirmation_code'] = confirmation_code
                context.user_data['user_email'] = user_email  # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                await update.message.reply_text(
                    "‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ:"
                )
                context.user_data['last_action'] = 'WAITING_FOR_CONFIRMATION_CODE'  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            else:
                await update.message.reply_text(
                    "‚ùå –ü–æ—á—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )

        elif context.user_data.get('last_action') == "WAITING_FOR_CONFIRMATION_CODE":
            user_input_code = update.message.text.strip()
            expected_code = context.user_data.get('confirmation_code')

            if user_input_code == expected_code:
                context.user_data['last_action'] = 'WAITING_FOR_NEW_PASSWORD'  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await update.message.reply_text("‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–µ—Ä–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        elif context.user_data.get('last_action') == "WAITING_FOR_NEW_PASSWORD":
            new_password = update.message.text.strip()

            if not is_valid_password(new_password):
                await update.message.reply_text(
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è*\n\n"
                    "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 6 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É, –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –∏ –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª.",
                    parse_mode='Markdown'
                )
                return

            await update.message.reply_text(
                "üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑:"
            )
            context.user_data['new_password'] = new_password  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
            context.user_data['last_action'] = 'WAITING_FOR_CONFIRM_PASSWORD'  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        elif context.user_data.get('last_action') == "WAITING_FOR_CONFIRM_PASSWORD":
            confirm_password = update.message.text.strip()
            new_password = context.user_data.get('new_password')
            user_email = context.user_data.get('user_email')

            if new_password == confirm_password:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                update_password_in_database(user_email, new_password)  # –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è

                await update.message.reply_text(
                    "‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"
                )
                context.user_data.clear()  # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            else:
                await update.message.reply_text(
                    "‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*",
            parse_mode='Markdown'
        )
    finally:
        conn.close()


async def show_customer_dashboard(update: Update, context: ContextTypes.DEFAULT_TYPE, username: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    keyboard = [
        [InlineKeyboardButton("–¢–æ–≤–∞—Ä—ã", callback_data='products')],
        [InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data='order_history')],
        [InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data='cart')],
        [InlineKeyboardButton("–í—ã—Ö–æ–¥", callback_data='logout')]  # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        query = update.callback_query
        await query.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
        await query.message.edit_text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.",
            reply_markup=reply_markup
        )
    elif update.message:
        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.",
            reply_markup=reply_markup
        )


async def handle_logout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏."""
    context.user_data.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = [
        [InlineKeyboardButton("–í—Ö–æ–¥", callback_data='sign_in')],
        [InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='reg_in')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text(
        "üëã –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n"
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT ID_category, Name FROM Category")
    categories = cursor.fetchall()
    conn.close()

    if not categories:
        await query.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="profile")]]
            ))
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard = [[InlineKeyboardButton(cat[1], callback_data=f"category_{cat[0]}")] for cat in categories]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="profile")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text("üì¶ *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤
async def show_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    car_id = query.data.split("_")[1]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT ID_product, Name, Description, Cost, Status 
        FROM Product 
        WHERE ID_car = ?
    """, (car_id,))
    products = cursor.fetchall()
    conn.close()

    if not products:
        await query.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"products")]]
            ))
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    keyboard = [[InlineKeyboardButton(f"{prod[0]} - {prod[2]}‚ÇΩ ({prod[3]})", callback_data=f"product_{prod[0]}")]
                for prod in products]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"products")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text("üõ† *–¢–æ–≤–∞—Ä—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=reply_markup)


async def show_product_details(update: Update, context: ContextTypes.DEFAULT_TYPE, product_id: int) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ, –≤–∫–ª—é—á–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É."""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT Name, Description, Cost, Status, IFNULL(Count_product, 0) 
        FROM Product
        WHERE ID_product = ?
    """, (product_id,))
    product = cursor.fetchone()
    conn.close()

    if not product:
        await update.callback_query.message.edit_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="products")]]))
        return

    name, description, cost, status, stock = product

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
    product_info = f"üõ† *–¢–æ–≤–∞—Ä:* {name}\n\n"
    product_info += f"üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
    product_info += f"üí∞ *–¶–µ–Ω–∞:* {cost}‚ÇΩ\n"
    product_info += f"üì¶ *–°—Ç–∞—Ç—É—Å:* {status}\n"
    product_info += f"üìä *–ù–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ:* {stock} —à—Ç."

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_id}")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="products")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
    await update.callback_query.message.edit_text(product_info, reply_markup=reply_markup)


async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE, product_id: int) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ."""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT Name, Cost, IFNULL(Count_product, 0) 
        FROM Product
        WHERE ID_product = ?
    """, (product_id,))
    product = cursor.fetchone()
    conn.close()

    if not product:
        await query.message.edit_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                      reply_markup=InlineKeyboardMarkup(
                                          [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="products")]]))
        return

    name, cost, stock = product

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥–µ
    if stock <= 0:
        await query.message.edit_text(
            f"‚ùå –¢–æ–≤–∞—Ä '{name}' –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="products")]])
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'cart' not in context.user_data:
        context.user_data['cart'] = []

    context.user_data['cart'].append({'product_id': product_id, 'name': name, 'cost': cost})

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    await query.message.edit_text(
        f"üõí –¢–æ–≤–∞—Ä '{name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ—Ä–∑–∏–Ω–µ.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="products")]
        ])
    )


async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cart = context.user_data.get('cart', [])

    if not cart:
        await query.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="profile")]]))
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    cart_info = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total_cost = 0
    for item in cart:
        cart_info += f"‚Ä¢ {item['name']} - {item['cost']}‚ÇΩ\n"
        total_cost += item['cost']

    cart_info += f"\nüõçÔ∏è *–û–±—â–∞—è —Å—É–º–º–∞:* {total_cost}‚ÇΩ"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [
        [InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="profile")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(cart_info, reply_markup=reply_markup)


async def create_order_and_generate_qr(cart, user_id):
    # 1. –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = create_connection()
    cursor = conn.cursor()

    # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Ç–∞–±–ª–∏—Ü—É "Order"
    cursor.execute("INSERT INTO 'Order' (ID_customer, Status) VALUES (?, ?)", (user_id, 'pending'))
    order_id = cursor.lastrowid

    total_cost = 0

    # 2. –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É Products_on_order
    for item in cart:
        cursor.execute("""
            INSERT INTO Products_on_order (ID_order, ID_product, Amount, Cost)
            VALUES (?, ?, ?, ?)
        """, (
        order_id, item['product_id'], 1, item['cost']))  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ = 1, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ - –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É

        total_cost += item['cost']

    conn.commit()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü
    payment_link = f'https://payment_system.com/pay?order_id={order_id}&amount={total_cost}'  # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏
    qr = qrcode.make(payment_link)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR –≤ –±–∞–π—Ç–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    img_byte_arr = io.BytesIO()
    qr.save(img_byte_arr)
    img_byte_arr.seek(0)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    conn.close()

    return img_byte_arr, order_id


async def checkout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∏ –æ—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É."""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
    cart = context.user_data.get('cart', [])

    if not cart:
        await query.message.edit_text("‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="profile")]]))
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ context
    username = context.user_data.get('username')
    # –ü–æ–ª—É—á–∞–µ–º customer_id –ø–æ username
    customer_id = await get_customer_id_by_username(username)
    if not customer_id:
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                                      reply_markup=InlineKeyboardMarkup(
                                          [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="profile")]]))
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR
    img_byte_arr, order_id = await create_order_and_generate_qr(cart, customer_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.message.edit_text(
        "üõí –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –î–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∏–∂–µ.",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{order_id}")]])
    )
    sent_photo_message = await query.message.reply_photo(photo=img_byte_arr)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ
    context.user_data['qr_message_id'] = sent_photo_message.message_id
    context.user_data['qr_chat_id'] = sent_photo_message.chat_id


async def get_customer_id_by_username(username: str) -> int:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç customer_id –ø–æ username –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""

    # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = create_connection()
    cursor = conn.cursor()

    # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ customer_id –ø–æ username
    cursor.execute("SELECT ID_customer FROM Customer WHERE Login = ?", (username,))

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = cursor.fetchone()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()

    if result:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞
        return result[0]
    else:
        # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º username –Ω–µ—Ç
        return None


async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –ø–ª–∞—Ç–µ–∂–µ–π."""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ context
    username = context.user_data.get('username')
    if not username:
        await query.message.edit_text("‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="profile")]]))
        return

    # –ü–æ–ª—É—á–∞–µ–º customer_id –ø–æ username
    customer_id = await get_customer_id_by_username(username)
    if not customer_id:
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="profile")]]))
        return

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–ª–∞—Ç–µ–∂–∞
    cart = context.user_data.get('cart', [])
    if not cart:
        await query.message.edit_text("‚ùå –í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É.",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="profile")]]))
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
    total_cost = sum(item['cost'] for item in cart)

    # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
    way_of_payment = "–°–ë–ü (QR-–∫–æ–¥)"

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ context
    username = context.user_data.get('username')
    if not username:
        await query.message.edit_text("‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                      reply_markup=InlineKeyboardMarkup(
                                          [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="profile")]]))
        return

    # –ü–æ–ª—É—á–∞–µ–º customer_id –ø–æ username
    customer_id = await get_customer_id_by_username(username)
    if not customer_id:
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                                      reply_markup=InlineKeyboardMarkup(
                                          [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="profile")]]))
        return

    # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = create_connection()
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute("""
        SELECT ID_order FROM "Order"
        WHERE ID_customer = ?
        ORDER BY ID_order DESC
        LIMIT 1
    """, (customer_id,))

    result = cursor.fetchone()

    if result:
        id_order = result[0]  # –ü–æ–ª—É—á–∞–µ–º ID_order
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É Payment —Å —Ä–µ–∞–ª—å–Ω—ã–º ID_order
        cursor.execute("""
            INSERT INTO Payment (ID_order, Summ_payment, Way_of_payment)
            VALUES (?, ?, ?)
        """, (id_order, total_cost, way_of_payment))

        conn.commit()  # –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    else:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
    await send_order_confirmation_email(customer_id, total_cost, way_of_payment)

    context.user_data['cart'] = []

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await query.message.edit_text(
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à –∑–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n\n–û–∂–∏–¥–∞–π—Ç–µ –ø–∏—Å—å–º–æ –æ –∑–∞–∫–∞–∑–µ.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="profile")]])
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å QR-–∫–æ–¥–æ–º
    qr_message_id = context.user_data.get('qr_message_id')
    qr_chat_id = context.user_data.get('qr_chat_id')

    if qr_message_id and qr_chat_id:
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å QR-–∫–æ–¥–æ–º
            await context.bot.delete_message(chat_id=qr_chat_id, message_id=qr_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.pop('qr_message_id', None)
    context.user_data.pop('qr_chat_id', None)


async def send_order_confirmation_email(customer_id, total_cost, way_of_payment):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ email –∫–ª–∏–µ–Ω—Ç–∞."""

    # –ü–æ–ª—É—á–∞–µ–º email –∫–ª–∏–µ–Ω—Ç–∞
    conn = create_connection()
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º email –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute("SELECT Email FROM Customer WHERE ID_customer = ?", (customer_id,))
    customer_email = cursor.fetchone()[0]

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    cursor.execute("SELECT ID_order FROM 'Order' WHERE ID_customer = ? ORDER BY ID_order DESC", (customer_id,))
    order_number = cursor.fetchone()[0]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
    cursor.execute("""
        SELECT p.Name, po.Amount, po.Cost
        FROM Products_on_order po
        INNER JOIN Product p ON po.ID_product = p.ID_product
        WHERE po.ID_order = ?
    """, (order_number,))

    products = cursor.fetchall()
    conn.close()

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    products_text = "üõí –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:\n"
    for product in products:
        name, amount, cost = product
        products_text += f"  - {name} (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}, –¶–µ–Ω–∞: {cost}‚ÇΩ)\n"

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    subject = f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! üéâ"
    body = f"""
    –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

    –ú—ã —Ä–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –≤–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_number} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –í–æ—Ç –µ–≥–æ –¥–µ—Ç–∞–ª–∏:

    üì¶ –û–±—â–∞—è —Å—É–º–º–∞: {total_cost}‚ÇΩ
    üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {way_of_payment}

    {products_text}

    –ü—É–Ω–∫—Ç —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ —Ç–æ–≤–∞—Ä–∞: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –Æ–∂–Ω–æ–ø–æ—Ä—Ç–æ–≤–∞—è, –¥. 38, —Å. 1.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –ª–∏—á–Ω–æ—Å—Ç—å.

    –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à –≤—ã–±–æ—Ä –∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —É–∂–µ –Ω–∞—á–∏–Ω–∞—é—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∞—à –∑–∞–∫–∞–∑, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å, –∂–¥–∏—Ç–µ –ø–∏—Å—å–º–æ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞!. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º.

    –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É –∏ –Ω–∞–¥–µ–µ–º—Å—è –Ω–∞ –≤–∞—à–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!

    –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
    –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ KorZap!
    """

    # –°–æ–∑–¥–∞–µ–º MIME —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = MIMEMultipart()
    msg['From'] = "telmanmessi@gmail.com"
    msg['To'] = customer_email
    msg['Subject'] = subject

    msg.attach(MIMEText(body, 'plain'))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ SMTP —Å–µ—Ä–≤–µ—Ä
    with smtplib.SMTP('smtp.gmail.com', 587) as server:
        server.starttls()
        server.login("login", "password")
        server.sendmail("telmanmessi@gmail.com", customer_email, msg.as_string())


async def history_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ context
    username = context.user_data.get('username')
    if not username:
        await query.message.edit_text("‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                      reply_markup=InlineKeyboardMarkup(
                                          [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="profile")]]))
        return

    # –ü–æ–ª—É—á–∞–µ–º customer_id –ø–æ username
    customer_id = await get_customer_id_by_username(username)
    if not customer_id:
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                                      reply_markup=InlineKeyboardMarkup(
                                          [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="profile")]]))
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("""
            SELECT o.ID_order, o.Date_of_order, o.Status, p.Summ_payment, p.Way_of_payment
            FROM "Order" o
            INNER JOIN Payment p ON o.ID_order = p.ID_order
            WHERE o.ID_customer = ?
        """, (customer_id,))

    orders = cursor.fetchall()

    if not orders:
        await query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
                                      reply_markup=InlineKeyboardMarkup(
                                          [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="profile")]]))
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
    history_text = "üìú –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:\n\n"

    for order in orders:
        id_order, date_order, status, summ, way = order

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
        cursor.execute("""
                SELECT p.ID_product, p.Name, po.Amount, po.Cost
                FROM Products_on_order po
                INNER JOIN Product p ON po.ID_product = p.ID_product
                WHERE po.ID_order = ?
                ORDER BY po.ID_order DESC
            """, (id_order,))

        products = cursor.fetchall()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        products_text = "üõí –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:\n"
        for product in products:
            id_product, name, amount, cost = product
            products_text += (f"  - {name} (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}, –¶–µ–Ω–∞: {cost}‚ÇΩ)\n")

        history_text += (f"üîπ –ù–æ–º–µ—Ä –ó–∞–∫–∞–∑–∞: {id_order}\n"
                         f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {date_order}\n"
                         f"‚úÖ –°—Ç–∞—Ç—É—Å: {status}\n"
                         f"üí∞ –°—É–º–º–∞: {summ}‚ÇΩ\n"
                         f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {way}\n"
                         f"{products_text}\n")

    conn.close()

    await query.message.edit_text(history_text,
                                  reply_markup=InlineKeyboardMarkup(
                                      [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="profile")]]))



def main():
    token = 'TOKEN'
    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()


if __name__ == '__main__':
    main()

